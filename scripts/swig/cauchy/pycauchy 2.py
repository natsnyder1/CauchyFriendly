# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pycauchy
else:
    import _pycauchy

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def pycauchy_step(msmts, controls):
    return _pycauchy.pycauchy_step(msmts, controls)

def pycauchy_single_step_ltiv(_pcdh, msmts, controls):
    return _pycauchy.pycauchy_single_step_ltiv(_pcdh, msmts, controls)

def pycauchy_single_step_nonlin(_pcdh, msmts, controls, with_propagate):
    return _pycauchy.pycauchy_single_step_nonlin(_pcdh, msmts, controls, with_propagate)

def pycauchy_initialize_lti_window_manager(num_windows, num_sim_steps, A0, p0, b0, Phi, Gamma, B, beta, H, gamma, debug_print, log_seq, log_full, log_dir, dt, init_step, win_var_boost):
    return _pycauchy.pycauchy_initialize_lti_window_manager(num_windows, num_sim_steps, A0, p0, b0, Phi, Gamma, B, beta, H, gamma, debug_print, log_seq, log_full, log_dir, dt, init_step, win_var_boost)

def pycauchy_initialize_nonlin_window_manager(num_windows, num_sim_steps, x0, A0, p0, b0, beta, gamma, f_dyn_update_callback, f_nonlinear_msmt_model, f_extended_msmt_update_callback, cmcc, debug_print, log_seq, log_full, log_dir, dt, init_step, win_var_boost):
    return _pycauchy.pycauchy_initialize_nonlin_window_manager(num_windows, num_sim_steps, x0, A0, p0, b0, beta, gamma, f_dyn_update_callback, f_nonlinear_msmt_model, f_extended_msmt_update_callback, cmcc, debug_print, log_seq, log_full, log_dir, dt, init_step, win_var_boost)

def pycauchy_initialize_ltv_window_manager(num_windows, num_sim_steps, A0, p0, b0, Phi, Gamma, B, beta, H, gamma, f_dyn_update_callback, debug_print, log_seq, log_full, log_dir, dt, init_step, win_var_boost):
    return _pycauchy.pycauchy_initialize_ltv_window_manager(num_windows, num_sim_steps, A0, p0, b0, Phi, Gamma, B, beta, H, gamma, f_dyn_update_callback, debug_print, log_seq, log_full, log_dir, dt, init_step, win_var_boost)

def pycauchy_initialize_nonlin(num_steps, x0, A0, p0, b0, beta, gamma, f_dyn_update_callback, f_nonlinear_msmt_model, f_extended_msmt_update_callback, cmcc, dt, init_step, debug_print):
    return _pycauchy.pycauchy_initialize_nonlin(num_steps, x0, A0, p0, b0, beta, gamma, f_dyn_update_callback, f_nonlinear_msmt_model, f_extended_msmt_update_callback, cmcc, dt, init_step, debug_print)

def pycauchy_initialize_ltv(num_steps, A0, p0, b0, Phi, Gamma, B, beta, H, gamma, f_dyn_update_callback, dt, init_step, debug_print):
    return _pycauchy.pycauchy_initialize_ltv(num_steps, A0, p0, b0, Phi, Gamma, B, beta, H, gamma, f_dyn_update_callback, dt, init_step, debug_print)

def pycauchy_initialize_lti(num_steps, A0, p0, b0, Phi, Gamma, B, beta, H, gamma, dt, init_step, debug_print):
    return _pycauchy.pycauchy_initialize_lti(num_steps, A0, p0, b0, Phi, Gamma, B, beta, H, gamma, dt, init_step, debug_print)

def pycauchy_single_step_deterministic_transform(_pcdh, Trans, bias):
    return _pycauchy.pycauchy_single_step_deterministic_transform(_pcdh, Trans, bias)

def pycauchy_single_step_get_number_of_terms(_pcdh):
    return _pycauchy.pycauchy_single_step_get_number_of_terms(_pcdh)

def pycauchy_single_step_eval_2d_rsys_cpdf(Trel, _s_pcdh, _p_pcdh, RSYS_APPROX_EPS, xlow, xhigh, delta_x, ylow, yhigh, delta_y):
    return _pycauchy.pycauchy_single_step_eval_2d_rsys_cpdf(Trel, _s_pcdh, _p_pcdh, RSYS_APPROX_EPS, xlow, xhigh, delta_x, ylow, yhigh, delta_y)

def pycauchy_single_step_reset(_pcdh, A0, p0, b0, xbar):
    return _pycauchy.pycauchy_single_step_reset(_pcdh, A0, p0, b0, xbar)

def pycauchy_single_step_set_master_step(_pcdh, step):
    return _pycauchy.pycauchy_single_step_set_master_step(_pcdh, step)

def pycauchy_single_step_get_duc(_pcdh):
    return _pycauchy.pycauchy_single_step_get_duc(_pcdh)

def pycauchy_shutdown():
    return _pycauchy.pycauchy_shutdown()

def pycauchy_single_step_shutdown(_pcdh):
    return _pycauchy.pycauchy_single_step_shutdown(_pcdh)

def pycauchy_single_step_set_window_number(_pcdh, win_num):
    return _pycauchy.pycauchy_single_step_set_window_number(_pcdh, win_num)

def pycauchy_get_marginal_2D_pointwise_cpdf(_pcdh, marg_idx1, marg_idx2, gridx_low, gridx_high, gridx_resolution, gridy_low, gridy_high, gridy_resolution, log_dir, reset_cache):
    return _pycauchy.pycauchy_get_marginal_2D_pointwise_cpdf(_pcdh, marg_idx1, marg_idx2, gridx_low, gridx_high, gridx_resolution, gridy_low, gridy_high, gridy_resolution, log_dir, reset_cache)

def pycauchy_get_2D_pointwise_cpdf(_pcdh, gridx_low, gridx_high, gridx_resolution, gridy_low, gridy_high, gridy_resolution, log_dir, reset_cache):
    return _pycauchy.pycauchy_get_2D_pointwise_cpdf(_pcdh, gridx_low, gridx_high, gridx_resolution, gridy_low, gridy_high, gridy_resolution, log_dir, reset_cache)

def pycauchy_get_marginal_1D_pointwise_cpdf(_pcdh, marg_idx1, gridx_low, gridx_high, gridx_resolution, log_dir):
    return _pycauchy.pycauchy_get_marginal_1D_pointwise_cpdf(_pcdh, marg_idx1, gridx_low, gridx_high, gridx_resolution, log_dir)

def pycauchy_get_1D_pointwise_cpdf(_pcdh, gridx_low, gridx_high, gridx_resolution, log_dir):
    return _pycauchy.pycauchy_get_1D_pointwise_cpdf(_pcdh, gridx_low, gridx_high, gridx_resolution, log_dir)

def pycauchy_get_reinitialization_statistics(_pcdh, z, xhat, Phat, H, gamma):
    return _pycauchy.pycauchy_get_reinitialization_statistics(_pcdh, z, xhat, Phat, H, gamma)

def pycauchy_speyers_window_init(xhat, Phat, H, gamma, z):
    return _pycauchy.pycauchy_speyers_window_init(xhat, Phat, H, gamma, z)

def pycauchy_set_tr_search_idxs_ordering(ordering):
    return _pycauchy.pycauchy_set_tr_search_idxs_ordering(ordering)

