# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pycauchy', [dirname(__file__)])
        except ImportError:
            import _pycauchy
            return _pycauchy
        if fp is not None:
            try:
                _mod = imp.load_module('_pycauchy', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pycauchy = swig_import_helper()
    del swig_import_helper
else:
    import _pycauchy
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def pycauchy_shutdown():
    return _pycauchy.pycauchy_shutdown()
pycauchy_shutdown = _pycauchy.pycauchy_shutdown

def pycauchy_single_step_shutdown(_pcdh):
    return _pycauchy.pycauchy_single_step_shutdown(_pcdh)
pycauchy_single_step_shutdown = _pycauchy.pycauchy_single_step_shutdown

def pycauchy_step(msmts, controls):
    return _pycauchy.pycauchy_step(msmts, controls)
pycauchy_step = _pycauchy.pycauchy_step

def pycauchy_single_step_ltiv(_pcdh, msmts, controls, full_info):
    return _pycauchy.pycauchy_single_step_ltiv(_pcdh, msmts, controls, full_info)
pycauchy_single_step_ltiv = _pycauchy.pycauchy_single_step_ltiv

def pycauchy_single_step_nonlin(_pcdh, msmts, controls, with_propagate, full_info):
    return _pycauchy.pycauchy_single_step_nonlin(_pcdh, msmts, controls, with_propagate, full_info)
pycauchy_single_step_nonlin = _pycauchy.pycauchy_single_step_nonlin

def pycauchy_initialize_lti_window_manager(num_windows, num_sim_steps, A0, p0, b0, Phi, Gamma, B, beta, H, gamma, debug_print, log_seq, log_full, log_dir, dt, init_step, win_var_boost):
    return _pycauchy.pycauchy_initialize_lti_window_manager(num_windows, num_sim_steps, A0, p0, b0, Phi, Gamma, B, beta, H, gamma, debug_print, log_seq, log_full, log_dir, dt, init_step, win_var_boost)
pycauchy_initialize_lti_window_manager = _pycauchy.pycauchy_initialize_lti_window_manager

def pycauchy_initialize_nonlin_window_manager(num_windows, num_sim_steps, x0, A0, p0, b0, beta, gamma, f_dyn_update_callback, f_nonlinear_msmt_model, f_extended_msmt_update_callback, cmcc, debug_print, log_seq, log_full, log_dir, dt, init_step, win_var_boost):
    return _pycauchy.pycauchy_initialize_nonlin_window_manager(num_windows, num_sim_steps, x0, A0, p0, b0, beta, gamma, f_dyn_update_callback, f_nonlinear_msmt_model, f_extended_msmt_update_callback, cmcc, debug_print, log_seq, log_full, log_dir, dt, init_step, win_var_boost)
pycauchy_initialize_nonlin_window_manager = _pycauchy.pycauchy_initialize_nonlin_window_manager

def pycauchy_initialize_ltv_window_manager(num_windows, num_sim_steps, A0, p0, b0, Phi, Gamma, B, beta, H, gamma, f_dyn_update_callback, debug_print, log_seq, log_full, log_dir, dt, init_step, win_var_boost):
    return _pycauchy.pycauchy_initialize_ltv_window_manager(num_windows, num_sim_steps, A0, p0, b0, Phi, Gamma, B, beta, H, gamma, f_dyn_update_callback, debug_print, log_seq, log_full, log_dir, dt, init_step, win_var_boost)
pycauchy_initialize_ltv_window_manager = _pycauchy.pycauchy_initialize_ltv_window_manager

def pycauchy_initialize_nonlin(num_steps, x0, A0, p0, b0, beta, gamma, f_dyn_update_callback, f_nonlinear_msmt_model, f_extended_msmt_update_callback, cmcc, dt, init_step, debug_print):
    return _pycauchy.pycauchy_initialize_nonlin(num_steps, x0, A0, p0, b0, beta, gamma, f_dyn_update_callback, f_nonlinear_msmt_model, f_extended_msmt_update_callback, cmcc, dt, init_step, debug_print)
pycauchy_initialize_nonlin = _pycauchy.pycauchy_initialize_nonlin

def pycauchy_initialize_ltv(num_steps, A0, p0, b0, Phi, Gamma, B, beta, H, gamma, f_dyn_update_callback, dt, init_step, debug_print):
    return _pycauchy.pycauchy_initialize_ltv(num_steps, A0, p0, b0, Phi, Gamma, B, beta, H, gamma, f_dyn_update_callback, dt, init_step, debug_print)
pycauchy_initialize_ltv = _pycauchy.pycauchy_initialize_ltv

def pycauchy_initialize_lti(num_steps, A0, p0, b0, Phi, Gamma, B, beta, H, gamma, dt, init_step, debug_print):
    return _pycauchy.pycauchy_initialize_lti(num_steps, A0, p0, b0, Phi, Gamma, B, beta, H, gamma, dt, init_step, debug_print)
pycauchy_initialize_lti = _pycauchy.pycauchy_initialize_lti

def pycauchy_single_step_reset(_pcdh, A0, p0, b0, xbar):
    return _pycauchy.pycauchy_single_step_reset(_pcdh, A0, p0, b0, xbar)
pycauchy_single_step_reset = _pycauchy.pycauchy_single_step_reset

def pycauchy_get_marginal_2D_pointwise_cpdf(_pcdh, marg_idx1, marg_idx2, gridx_low, gridx_high, gridx_resolution, gridy_low, gridy_high, gridy_resolution, log_dir):
    return _pycauchy.pycauchy_get_marginal_2D_pointwise_cpdf(_pcdh, marg_idx1, marg_idx2, gridx_low, gridx_high, gridx_resolution, gridy_low, gridy_high, gridy_resolution, log_dir)
pycauchy_get_marginal_2D_pointwise_cpdf = _pycauchy.pycauchy_get_marginal_2D_pointwise_cpdf

def pycauchy_get_2D_pointwise_cpdf(_pcdh, gridx_low, gridx_high, gridx_resolution, gridy_low, gridy_high, gridy_resolution, log_dir):
    return _pycauchy.pycauchy_get_2D_pointwise_cpdf(_pcdh, gridx_low, gridx_high, gridx_resolution, gridy_low, gridy_high, gridy_resolution, log_dir)
pycauchy_get_2D_pointwise_cpdf = _pycauchy.pycauchy_get_2D_pointwise_cpdf

def pycauchy_get_marginal_1D_pointwise_cpdf(_pcdh, marg_idx1, gridx_low, gridx_high, gridx_resolution, log_dir):
    return _pycauchy.pycauchy_get_marginal_1D_pointwise_cpdf(_pcdh, marg_idx1, gridx_low, gridx_high, gridx_resolution, log_dir)
pycauchy_get_marginal_1D_pointwise_cpdf = _pycauchy.pycauchy_get_marginal_1D_pointwise_cpdf

def pycauchy_get_1D_pointwise_cpdf(_pcdh, gridx_low, gridx_high, gridx_resolution, log_dir):
    return _pycauchy.pycauchy_get_1D_pointwise_cpdf(_pcdh, gridx_low, gridx_high, gridx_resolution, log_dir)
pycauchy_get_1D_pointwise_cpdf = _pycauchy.pycauchy_get_1D_pointwise_cpdf

def pycauchy_get_reinitialization_statistics(_pcdh, z):
    return _pycauchy.pycauchy_get_reinitialization_statistics(_pcdh, z)
pycauchy_get_reinitialization_statistics = _pycauchy.pycauchy_get_reinitialization_statistics

def pycauchy_speyers_window_init(x1_hat, Var, H, gamma, z):
    return _pycauchy.pycauchy_speyers_window_init(x1_hat, Var, H, gamma, z)
pycauchy_speyers_window_init = _pycauchy.pycauchy_speyers_window_init

def pycauchy_set_tr_search_idxs_ordering(ordering):
    return _pycauchy.pycauchy_set_tr_search_idxs_ordering(ordering)
pycauchy_set_tr_search_idxs_ordering = _pycauchy.pycauchy_set_tr_search_idxs_ordering
# This file is compatible with both classic and new-style classes.


